generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  department     String?

  questions Question[]
  answers   Answer[]
  votes     Vote[]
  accounts  Account[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  views     Int      @default(0)

  author  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers Answer[]
  votes   Vote[]
  tags    Tag[]
}

model Answer {
  id         String   @id @default(cuid())
  body       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String
  questionId String
  isAccepted Boolean  @default(false)

  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes    Vote[]
}

model Vote {
  id         String   @id @default(cuid())
  value      Int // 1 for upvote, -1 for downvote
  userId     String
  questionId String?
  answerId   String?
  createdAt  DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer   Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId, answerId])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[]
}
